version: '3.9'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sssdwnld_app
    restart: unless-stopped
    ports:
      - "127.0.0.1:${PORT:-3000}:3000"
    networks:
      - sssdwnld-network
    volumes:
      - ./logs:/app/packages/backend/logs
    env_file:
      - ./packages/backend/.env
    environment:
      - NODE_ENV=production
      - PORT=3000
      - REDIS_HOST=redis
      - CORS_ORIGIN=${CORS_ORIGIN}
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M

  redis:
    image: redis:7-alpine
    container_name: sssdwnld_redis
    restart: unless-stopped
    command: redis-server --save 60 1 --loglevel warning --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - sssdwnld-network
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M

  nginx:
    image: nginx:alpine
    container_name: sssdwnld_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    networks:
      - sssdwnld-network
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    depends_on:
      - app
    command: >
      /bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'

  certbot:
    image: certbot/certbot
    container_name: sssdwnld_certbot
    restart: unless-stopped
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  redis-data:
    driver: local

networks:
  sssdwnld-network:
    driver: bridge