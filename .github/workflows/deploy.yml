name: CI/CD Production Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/sssdwnld
  NODE_VERSION: '20'

jobs:
  test:
    name: üß™ Test & Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm test
        env:
          CI: true

  build:
    name: üèóÔ∏è Build & Push Docker Image
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.generate_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate version tag
        id: generate_version
        run: |
          VERSION=$(date +%Y%m%d).${{ github.run_number }}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        id: build_and_push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ steps.generate_version.outputs.version }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache,mode=max

  security-scan:
    name: üõ°Ô∏è Security Scan
    needs: build
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Run Trivy vulnerability scanner on the new image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_IMAGE }}:${{ needs.build.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy:
    name: üöÄ Deploy to Production
    needs: [build, security-scan]
    runs-on: ubuntu-latest
    # La syntaxe 'environment' attend un objet 'name' et optionnellement 'url'.
    # C'est la correction pour l'erreur "Value 'production' is not valid".
    environment:
      name: production
      url: https://sssdwnld.com
    steps:
      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e
            export APP_DIR="/var/www/sssdwnld_2"
            export NEW_IMAGE="${{ env.DOCKER_IMAGE }}:${{ needs.build.outputs.version }}"
            cd $APP_DIR
            echo "üöÄ Starting deployment of new image: $NEW_IMAGE"
            sed -i "s|image: ${{ env.DOCKER_IMAGE }}:.*|image: $NEW_IMAGE|g" docker-compose.yml
            echo "‚úÖ docker-compose.yml updated"
            docker compose pull app
            echo "üíæ Backing up Redis..."
            docker compose exec -T redis redis-cli BGSAVE
            echo "üöÄ Deploying new version..."
            docker compose up -d --no-deps --scale app=2 --no-recreate app
            echo "‚è±Ô∏è Waiting for new container to be healthy..."
            sleep 15
            if [ "$(docker compose ps -q app | wc -l)" -eq 2 ]; then
                echo "‚úÖ New container is up. Scaling down old container."
                docker compose up -d --no-deps --scale app=1 --no-recreate app
            else
                echo "‚ùå Health check failed or new container did not start. Rolling back."
                exit 1
            fi
            echo "üåê Verifying application endpoint..."
            curl -f https://sssdwnld.com/api/v1/health
            echo "üßπ Cleaning up old Docker images..."
            docker image prune -af
            echo "‚úÖ Deployment successful for version: ${{ needs.build.outputs.version }}"

  notify:
    name: üîî Notify on Slack
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          text: |
            ${{ needs.deploy.result == 'success' && '‚úÖ' || '‚ùå' }} *Deployment to Production ${{ needs.deploy.result }}*
            Version: `${{ needs.build.outputs.version }}`
            URL: https://sssdwnld.com
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}